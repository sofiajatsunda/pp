---
openapi: 3.0.0
info:
  title: What the event
  description: |
    This is an event calendar. You can create an event, store, update or delete it. You can share it with another users. You can see list of created and shared events.
  termsOfService: http://swagger.io/terms/
  contact:
    email: knikoletocka901@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
tags:
- name: event
  description: Everything about your events
- name: user
  description: Operations about user
paths:
  /event:
    get:
      tags:
      - event
      summary: List of all events
      operationId: findALLEvents
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        "404":
          description: Events not found
    post:
      tags:
      - event
      summary: Add a new event to the calendar
      operationId: addEvent
      requestBody:
        $ref: '#/components/requestBodies/Event'
      responses:
        "200":
          description: successful operation
        "405":
          description: Invalid input
      security:
      - WhatTheEvent_auth:
        - write:events
        - read:events
  /event/findByDate:
    get:
      tags:
      - event
      summary: Finds events by date
      operationId: findEventBydate
      parameters:
      - name: date
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            $ref: '#/components/schemas/Date'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        "400":
          description: Invalid date value
      security:
      - WhatTheEvent_auth:
        - write:events
        - read:events
  /event/findByTags:
    get:
      tags:
      - event
      summary: Finds events by tags
      description: Muliple tags can be provided with comma separated strings. Use\ \ tag1, tag2, tag3 for testing.
      operationId: findEventsByTags
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        "400":
          description: Invalid tag value
      security:
      - WhatTheEvent_auth:
        - write:events
        - read:events
  /event/{eventId}:
    get:
      tags:
      - event
      summary: Find event by ID
      description: Returns a single event
      operationId: getEventById
      parameters:
      - name: eventId
        in: path
        description: ID of event to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                $ref: '#/components/schemas/Event'
        "400":
          description: Invalid ID supplied
        "404":
          description: Event not found
      security:
      - api_key: []
    put:
      tags:
      - event
      summary: Updates an event in the calendar with form data
      operationId: updateEventWithForm
      parameters:
      - name: eventId
        in: path
        description: ID of event that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        $ref: '#/components/requestBodies/Event'
      responses:
        "200":
          description: successful operation
        "405":
          description: Invalid input
      security:
      - WhatTheEvent_auth:
        - write:events
        - read:events
    delete:
      tags:
      - event
      summary: Deletes an event
      operationId: deleteEvent
      parameters:
      - name: eventId
        in: path
        description: Event id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Event not found
      security:
        - WhatTheEvent_auth:
           - write:events
           - read:events 
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
      security:
        - WhatTheEvent_auth:
          - write:events
          - read:events 
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      security:
          - WhatTheEvent_auth:
             - write:events
             - read:events 
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
      security:
        - WhatTheEvent_auth:
            - write:events
            - read:events 
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      security:
        - WhatTheEvent_auth:
            - write:events
            - read:events 
components:
  schemas:
    Date:
      type: object
      properties:
        day:
          type: integer
          format: int64
        month:
          type: integer
          format: int64
        year:
          type: integer
          format: int64
      xml:
        name: Date
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
      xml:
        name: User
    Tag:
      type: array
      items:
        type: string
    Event:
      required:
      - name
      type: object
      properties:
        creatorid:
          type: integer
          format: int64
        usersid:
          type: array
          items:
            type: integer
        id:
          type: integer
          format: int64
        name:
          type: string
          example: birthday
        content:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        date:
          type: array
          items:
            $ref: '#/components/schemas/Date'
        
      xml:
        name: Event
  requestBodies:
    Event:
      description: Event object that needs to be added to the calendar
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Event'
        application/xml:
          schema:
            $ref: '#/components/schemas/Event'
      required: true
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
  securitySchemes:
    WhatTheEvent_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://WhatTheEvent/oauth/dialog
          scopes:
            write:events: modify events in your account
            read:events: read your events
    api_key:
       type: apiKey
       name: api_key
       in: header
